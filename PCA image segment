import numpy as np
import matplotlib.pyplot as plt
import cv2
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans

# Step 1: Read the image
image = cv2.imread('monarch.jpg')  # Replace with your image path
image = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)

# Step 2: Flatten the image (convert it to a 2D array where each row is a pixel and columns are RGB values)
pixels = image.reshape(-1, 3)

# Step 3: Apply PCA to reduce the dimensionality (from 3 to 2 or even 1, depending on how much information you want to keep)
pca = PCA(n_components=2)  # You can experiment with 1, 2, or more components
pca_result = pca.fit_transform(pixels)

# Step 4: Apply KMeans clustering on the PCA-transformed data
kmeans = KMeans(n_clusters=3, random_state=42)  # You can change the number of clusters
labels = kmeans.fit_predict(pca_result)

# Step 5: Reshape the labels back to the image shape (height, width)
segmented_image = labels.reshape(image.shape[0], image.shape[1])

# Step 6: Visualize the segmented image
plt.figure(figsize=(10, 6))
plt.imshow(segmented_image, cmap='viridis')  # Using 'viridis' colormap to visualize the clusters
plt.title("Image Segmentation using PCA and KMeans")
plt.axis('off')
plt.show()

# Step 7: Optional - Visualize the clustering result (reduced PCA components)
plt.figure(figsize=(10, 6))
plt.scatter(pca_result[:, 0], pca_result[:, 1], c=labels, cmap='viridis', s=2)
plt.title("Clustering result in PCA space")
plt.xlabel('PCA Component 1')
plt.ylabel('PCA Component 2')
plt.show()
